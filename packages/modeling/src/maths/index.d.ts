export const constants: {
    EPS: number;
    spatialResolution: number;
};
export const line2: {
    clone: (...params: any[]) => any;
    closestPoint: (point: any, line: any) => any;
    create: () => any[];
    direction: (line: any) => any;
    distanceToPoint: (point: any, line: any) => number;
    equals: (line1: any, line2: any) => boolean;
    fromPoints: (p1: any, p2: any) => any;
    fromValues: (x: number, y: number, w: any) => any;
    intersectPointOfLines: (line1: any, line2: any) => any;
    origin: (line: any) => any;
    reverse: (...params: any[]) => any;
    toString: (line: any) => string;
    transform: (...params: any[]) => any;
    xAtY: (y: number, line: any) => number;
};
export const line3: {
    clone: (...params: any[]) => any;
    closestPoint: (point: any, line: any) => any;
    create: () => any[];
    direction: (line: any) => any;
    distanceToPoint: (point: any, line: any) => number;
    equals: (line1: any, line2: any) => boolean;
    fromPlanes: (plane1: any, plane2: any) => any;
    fromPointAndDirection: (point: any, direction: any) => any;
    fromPoints: (p1: any, p2: any) => any;
    intersectPointOfLineAndPlane: (plane: any, line: any) => any;
    origin: (line: any) => any;
    reverse: (...params: any[]) => any;
    toString: (line: any) => string;
    transform: (...params: any[]) => any;
};
export const mat4: {
    add: (...params: any[]) => any;
    clone: (...params: any[]) => any;
    create: () => any[];
    equals: (a: any, b: any) => boolean;
    fromRotation: (...params: any[]) => any;
    fromScaling: (...params: any[]) => any;
    fromTaitBryanRotation: (yaw: number, pitch: number, roll: number) => any;
    fromTranslation: (...params: any[]) => any;
    fromValues: (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number) => any;
    fromXRotation: (...params: any[]) => any;
    fromYRotation: (...params: any[]) => any;
    fromZRotation: (...params: any[]) => any;
    identity: (...params: any[]) => any;
    isMirroring: (mat: any) => boolean;
    mirrorByPlane: (...params: any[]) => any;
    multiply: (...params: any[]) => any;
    rotate: (...params: any[]) => any;
    rotateX: (...params: any[]) => any;
    rotateY: (...params: any[]) => any;
    rotateZ: (...params: any[]) => any;
    scale: (...params: any[]) => any;
    subtract: (...params: any[]) => any;
    toString: (mat: any) => string;
    translate: (...params: any[]) => any;
};
export const plane: {
    clone: (...params: any[]) => any;
    create: () => any[];
    equals: (a: any, b: any) => boolean;
    flip: (...params: any[]) => any;
    fromNormalAndPoint: (normal: any, point: any) => any[];
    fromValues: (x: number, y: number, z: number, w: number) => any;
    fromPoints: (a: any, b: any, c: any) => any;
    fromPointsRandom: (a: any, b: any, c: any) => any;
    signedDistanceToPoint: (plane: any, vector: any) => number;
    toString: (vec: any) => string;
    transform: (matrix: any, plane: any) => any[];
};
export const utils: {
    area: (points: any) => number;
    clamp: (value: any, min: any, max: any) => number;
    interpolateBetween2DPointsForY: (point1: any, point2: any, y: any) => any[];
    intersect: (p1: any, p2: any, p3: any, p4: any) => any[];
    solve2Linear: (a: any, b: any, c: any, d: any, u: any, v: any) => number[];
};
export const vec2: {
    abs: (...params: any[]) => any;
    add: (...params: any[]) => any;
    angle: (vector: any) => number;
    angleDegrees: (vector: any) => number;
    angleRadians: (vector: any) => number;
    canonicalize: (vector: any) => any;
    clone: (...params: any[]) => any;
    create: () => any[];
    cross: (...params: any[]) => any;
    distance: (a: any, b: any) => number;
    divide: (...params: any[]) => any;
    dot: (a: any, b: any) => number;
    equals: (a: any, b: any) => boolean;
    fromAngle: (radians: any) => any;
    fromAngleDegrees: (degrees: any) => any;
    fromAngleRadians: (radians: any) => any;
    fromArray: (data: any[]) => any;
    fromScalar: (scalar: number) => any;
    fromValues: (x: number, y: number) => any;
    length: (a: any) => number;
    lerp: (...params: any[]) => any;
    max: (...params: any[]) => any;
    min: (...params: any[]) => any;
    multiply: (...params: any[]) => any;
    negate: (...params: any[]) => any;
    normal: (...params: any[]) => any;
    normalize: (...params: any[]) => any;
    rotate: (...params: any[]) => any;
    scale: (...params: any[]) => any;
    squaredDistance: (a: any, b: any) => number;
    squaredLength: (a: any) => number;
    subtract: (...params: any[]) => any;
    toString: (vec: any) => string;
    transform: (...params: any[]) => any;
};
export const vec3: {
    abs: (...params: any[]) => any;
    add: (...params: any[]) => any;
    angle: (a: any, b: any) => number;
    canonicalize: (vector: any) => any;
    clone: (...params: any[]) => any;
    create: () => any[];
    cross: (...params: any[]) => any;
    distance: (a: any, b: any) => number;
    divide: (...params: any[]) => any;
    dot: (a: any, b: any) => number;
    equals: (a: any, b: any) => boolean;
    fromArray: (data: any[]) => any;
    fromScalar: (scalar: any) => any;
    fromValues: (x: number, y: number, z: number) => any;
    fromVec2: (vec2: any, z?: number) => any;
    length: (a: any) => number;
    lerp: (...params: any[]) => any;
    max: (...params: any[]) => any;
    min: (...params: any[]) => any;
    multiply: (...params: any[]) => any;
    negate: (...params: any[]) => any;
    normalize: (...params: any[]) => any;
    orthogonal: (...params: any[]) => any;
    rotateX: (...params: any[]) => any;
    rotateY: (...params: any[]) => any;
    rotateZ: (...params: any[]) => any;
    scale: (...params: any[]) => any;
    squaredDistance: (a: any, b: any) => number;
    squaredLength: (a: any) => number;
    subtract: (...params: any[]) => any;
    toString: (vec: any) => string;
    transform: (...params: any[]) => any;
    unit: (...params: any[]) => any;
};
export const vec4: {
    clone: (...params: any[]) => any;
    create: () => any[];
    dot: (a: any, b: any) => number;
    fromScalar: (scalar: number) => any;
    fromValues: (x: number, y: number, z: number, w: number) => any;
    toString: (vec: any) => string;
    transform: (...params: any[]) => any;
};
